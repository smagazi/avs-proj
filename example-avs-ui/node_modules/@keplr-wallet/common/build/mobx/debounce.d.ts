import { SettledResponse, SettledResponses } from "@keplr-wallet/types";
type Request<ARGS, R> = {
    args: ARGS;
    action: (res: SettledResponse<R>) => void;
    resolver: () => void;
};
export declare class DebounceActionTimer<ARGS, R> {
    readonly debounceMs: number;
    readonly handler: (requests: {
        args: ARGS;
        action: (res: SettledResponse<R>) => void;
    }[]) => Promise<SettledResponses<R>> | SettledResponses<R>;
    protected requests: Request<ARGS, R>[];
    protected startTime: number;
    constructor(debounceMs: number, handler: (requests: {
        args: ARGS;
        action: (res: SettledResponse<R>) => void;
    }[]) => Promise<SettledResponses<R>> | SettledResponses<R>);
    protected tick: () => void;
    protected handleResponses: (requests: Request<ARGS, R>[], responses: SettledResponses<R>) => void;
    call(args: ARGS, action: (res: SettledResponse<R>) => void): Promise<void>;
    protected startTimer(): void;
    protected nextTick(fn: () => void): void;
}
export {};

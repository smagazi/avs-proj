"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultProtoCodec = exports.ProtoCodec = void 0;
const msgs_1 = require("@keplr-wallet/proto-types/agoric/swingset/msgs");
const tx_1 = require("@keplr-wallet/proto-types/cosmos/bank/v1beta1/tx");
const tx_2 = require("@keplr-wallet/proto-types/cosmos/staking/v1beta1/tx");
const tx_3 = require("@keplr-wallet/proto-types/cosmos/authz/v1beta1/tx");
const tx_4 = require("@keplr-wallet/proto-types/cosmos/gov/v1beta1/tx");
const tx_5 = require("@keplr-wallet/proto-types/cosmos/distribution/v1beta1/tx");
const tx_6 = require("@keplr-wallet/proto-types/cosmwasm/wasm/v1/tx");
const tx_7 = require("@keplr-wallet/proto-types/ibc/applications/transfer/v1/tx");
const unknown_1 = require("./unknown");
const authz_1 = require("@keplr-wallet/proto-types/cosmos/authz/v1beta1/authz");
const authz_2 = require("@keplr-wallet/proto-types/cosmos/staking/v1beta1/authz");
const authz_3 = require("@keplr-wallet/proto-types/cosmos/bank/v1beta1/authz");
const buffer_1 = require("buffer/");
__exportStar(require("./unknown"), exports);
class ProtoCodec {
    constructor() {
        this.typeUrlMap = new Map();
    }
    unpackAnyFactory(typeUrl) {
        if (!this.typeUrlMap.has(typeUrl)) {
            return undefined;
        }
        return this.typeUrlMap.get(typeUrl);
    }
    /**
     * Unpack the any to the registered message.
     * NOTE: If there is no matched message, it will not throw an error but return the `UnknownMessage` class.
     * @param any
     */
    unpackAny(any) {
        const factory = this.unpackAnyFactory(any.typeUrl);
        if (!factory) {
            return new unknown_1.UnknownMessage(any.typeUrl, any.value);
        }
        const unpacked = factory.decode(any.value);
        return Object.assign(Object.assign({}, any), { unpacked });
    }
    unpackedAnyToJSONRecursive(unpacked) {
        if (unpacked instanceof unknown_1.UnknownMessage) {
            return unpacked.toJSON();
        }
        const factory = this.unpackAnyFactory(unpacked.typeUrl);
        if (factory && "unpacked" in unpacked && unpacked.unpacked) {
            const isJSONEncodedAny = (any) => {
                const r = typeof any === "object" &&
                    !(any instanceof unknown_1.UnknownMessage) &&
                    "typeUrl" in any &&
                    any.typeUrl &&
                    typeof any.typeUrl === "string" &&
                    "value" in any &&
                    any.value &&
                    typeof any.value === "string";
                if (r) {
                    try {
                        buffer_1.Buffer.from(any.value, "base64");
                    }
                    catch (_a) {
                        return false;
                    }
                }
                return r;
            };
            const unpackJSONEncodedAnyInner = (jsonEncodedAny) => {
                const factory = this.unpackAnyFactory(jsonEncodedAny.typeUrl);
                const bz = buffer_1.Buffer.from(jsonEncodedAny.value, "base64");
                if (!factory) {
                    return new unknown_1.UnknownMessage(jsonEncodedAny.typeUrl, bz).toJSON();
                }
                const unpacked = factory.decode(bz);
                return {
                    typeUrl: jsonEncodedAny.typeUrl,
                    value: factory.toJSON(unpacked),
                };
            };
            const unpackedJSONEncodedAnyRecursive = (obj) => {
                if (Array.isArray(obj)) {
                    for (let i = 0; i < obj.length; i++) {
                        const value = obj[i];
                        if (isJSONEncodedAny(value)) {
                            obj[i] = unpackJSONEncodedAnyInner(value);
                        }
                        else if (typeof value === "object") {
                            obj[i] = unpackedJSONEncodedAnyRecursive(value);
                        }
                    }
                }
                else {
                    for (const key in obj) {
                        const value = obj[key];
                        if (isJSONEncodedAny(value)) {
                            obj[key] = unpackJSONEncodedAnyInner(value);
                        }
                        else if (typeof value === "object") {
                            obj[key] = unpackedJSONEncodedAnyRecursive(value);
                        }
                    }
                }
                return obj;
            };
            // This is mutated by logic.
            let mutObj = factory.toJSON(unpacked.unpacked);
            if (mutObj && typeof mutObj === "object") {
                mutObj = unpackedJSONEncodedAnyRecursive(mutObj);
                return {
                    typeUrl: unpacked.typeUrl,
                    value: mutObj,
                };
            }
        }
        return new unknown_1.UnknownMessage(unpacked.typeUrl, unpacked.value).toJSON();
    }
    registerAny(typeUrl, message) {
        this.typeUrlMap.set(typeUrl, message);
    }
}
exports.ProtoCodec = ProtoCodec;
exports.defaultProtoCodec = new ProtoCodec();
exports.defaultProtoCodec.registerAny("/agoric.swingset.MsgWalletSpendAction", msgs_1.MsgWalletSpendAction);
exports.defaultProtoCodec.registerAny("/agoric.swingset.MsgProvision", msgs_1.MsgProvision);
exports.defaultProtoCodec.registerAny("/cosmos.bank.v1beta1.MsgSend", tx_1.MsgSend);
exports.defaultProtoCodec.registerAny("/cosmos.bank.v1beta1.MsgMultiSend", tx_1.MsgMultiSend);
exports.defaultProtoCodec.registerAny("/cosmos.staking.v1beta1.MsgDelegate", tx_2.MsgDelegate);
exports.defaultProtoCodec.registerAny("/cosmos.staking.v1beta1.MsgUndelegate", tx_2.MsgUndelegate);
exports.defaultProtoCodec.registerAny("/cosmos.staking.v1beta1.MsgBeginRedelegate", tx_2.MsgBeginRedelegate);
exports.defaultProtoCodec.registerAny("/cosmwasm.wasm.v1.MsgExecuteContract", tx_6.MsgExecuteContract);
exports.defaultProtoCodec.registerAny("/cosmwasm.wasm.v1.MsgInstantiateContract", tx_6.MsgInstantiateContract);
exports.defaultProtoCodec.registerAny("/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward", tx_5.MsgWithdrawDelegatorReward);
exports.defaultProtoCodec.registerAny("/cosmos.distribution.v1beta1.MsgSetWithdrawAddress", tx_5.MsgSetWithdrawAddress);
exports.defaultProtoCodec.registerAny("/ibc.applications.transfer.v1.MsgTransfer", tx_7.MsgTransfer);
exports.defaultProtoCodec.registerAny("/cosmos.gov.v1beta1.MsgVote", tx_4.MsgVote);
exports.defaultProtoCodec.registerAny("/cosmos.authz.v1beta1.MsgGrant", tx_3.MsgGrant);
// ----- Authz grants -----
exports.defaultProtoCodec.registerAny("/cosmos.authz.v1beta1.GenericAuthorization", authz_1.GenericAuthorization);
exports.defaultProtoCodec.registerAny("/cosmos.staking.v1beta1.StakeAuthorization", authz_2.StakeAuthorization);
exports.defaultProtoCodec.registerAny("/cosmos.bank.v1beta1.SendAuthorization", authz_3.SendAuthorization);
// ----- Authz grants -----
exports.defaultProtoCodec.registerAny("/cosmos.authz.v1beta1.MsgRevoke", tx_3.MsgRevoke);
exports.defaultProtoCodec.registerAny("/cosmos.authz.v1beta1.MsgExec", tx_3.MsgExec);
//# sourceMappingURL=index.js.map
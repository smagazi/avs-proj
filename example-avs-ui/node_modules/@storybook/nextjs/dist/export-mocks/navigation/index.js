"use strict";var __create=Object.create;var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __getProtoOf=Object.getPrototypeOf,__hasOwnProp=Object.prototype.hasOwnProperty;var __export=(target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:!0})},__copyProps=(to,from,except,desc)=>{if(from&&typeof from=="object"||typeof from=="function")for(let key of __getOwnPropNames(from))!__hasOwnProp.call(to,key)&&key!==except&&__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to},__reExport=(target,mod,secondTarget)=>(__copyProps(target,mod,"default"),secondTarget&&__copyProps(secondTarget,mod,"default")),__toESM=(mod,isNodeMode,target)=>(target=mod!=null?__create(__getProtoOf(mod)):{},__copyProps(isNodeMode||!mod||!mod.__esModule?__defProp(target,"default",{value:mod,enumerable:!0}):target,mod)),__toCommonJS=mod=>__copyProps(__defProp({},"__esModule",{value:!0}),mod);var navigation_exports={};__export(navigation_exports,{createNavigation:()=>createNavigation,getRouter:()=>getRouter,notFound:()=>notFound2,permanentRedirect:()=>permanentRedirect,redirect:()=>redirect,useParams:()=>useParams2,usePathname:()=>usePathname2,useRouter:()=>useRouter2,useSearchParams:()=>useSearchParams2,useSelectedLayoutSegment:()=>useSelectedLayoutSegment2,useSelectedLayoutSegments:()=>useSelectedLayoutSegments2,useServerInsertedHTML:()=>useServerInsertedHTML2});module.exports=__toCommonJS(navigation_exports);var import_preview_errors=require("storybook/internal/preview-errors"),import_test=require("@storybook/test"),actual=__toESM(require("next/dist/client/components/navigation")),import_redirect=require("next/dist/client/components/redirect"),import_redirect_status_code=require("next/dist/client/components/redirect-status-code");__reExport(navigation_exports,require("next/dist/client/components/navigation"),module.exports);var navigationAPI,createNavigation=overrides=>{let navigationActions={push:(0,import_test.fn)().mockName("next/navigation::useRouter().push"),replace:(0,import_test.fn)().mockName("next/navigation::useRouter().replace"),forward:(0,import_test.fn)().mockName("next/navigation::useRouter().forward"),back:(0,import_test.fn)().mockName("next/navigation::useRouter().back"),prefetch:(0,import_test.fn)().mockName("next/navigation::useRouter().prefetch"),refresh:(0,import_test.fn)().mockName("next/navigation::useRouter().refresh")};return overrides&&Object.keys(navigationActions).forEach(key=>{key in overrides&&(navigationActions[key]=(0,import_test.fn)((...args)=>overrides[key](...args)).mockName(`useRouter().${key}`))}),navigationAPI=navigationActions,navigationAPI},getRouter=()=>{if(!navigationAPI)throw new import_preview_errors.NextjsRouterMocksNotAvailable({importType:"next/navigation"});return navigationAPI},redirect=(0,import_test.fn)((url,type=actual.RedirectType.push)=>{throw(0,import_redirect.getRedirectError)(url,type,import_redirect_status_code.RedirectStatusCode.SeeOther)}).mockName("next/navigation::redirect"),permanentRedirect=(0,import_test.fn)((url,type=actual.RedirectType.push)=>{throw(0,import_redirect.getRedirectError)(url,type,import_redirect_status_code.RedirectStatusCode.SeeOther)}).mockName("next/navigation::permanentRedirect"),useSearchParams2=(0,import_test.fn)(actual.useSearchParams).mockName("next/navigation::useSearchParams"),usePathname2=(0,import_test.fn)(actual.usePathname).mockName("next/navigation::usePathname"),useSelectedLayoutSegment2=(0,import_test.fn)(actual.useSelectedLayoutSegment).mockName("next/navigation::useSelectedLayoutSegment"),useSelectedLayoutSegments2=(0,import_test.fn)(actual.useSelectedLayoutSegments).mockName("next/navigation::useSelectedLayoutSegments"),useRouter2=(0,import_test.fn)(actual.useRouter).mockName("next/navigation::useRouter"),useServerInsertedHTML2=(0,import_test.fn)(actual.useServerInsertedHTML).mockName("next/navigation::useServerInsertedHTML"),notFound2=(0,import_test.fn)(actual.notFound).mockName("next/navigation::notFound"),useParams2=(0,import_test.fn)(actual.useParams).mockName("next/navigation::useParams");0&&(module.exports={createNavigation,getRouter,notFound,permanentRedirect,redirect,useParams,usePathname,useRouter,useSearchParams,useSelectedLayoutSegment,useSelectedLayoutSegments,useServerInsertedHTML,...require("next/dist/client/components/navigation")});

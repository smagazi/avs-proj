import '../../chunk-42AJV46F.mjs';
import { NextjsRouterMocksNotAvailable } from 'storybook/internal/preview-errors';
import { fn } from '@storybook/test';
import * as actual from 'next/dist/client/components/navigation';
export * from 'next/dist/client/components/navigation';
import { getRedirectError } from 'next/dist/client/components/redirect';
import { RedirectStatusCode } from 'next/dist/client/components/redirect-status-code';

var navigationAPI,createNavigation=overrides=>{let navigationActions={push:fn().mockName("next/navigation::useRouter().push"),replace:fn().mockName("next/navigation::useRouter().replace"),forward:fn().mockName("next/navigation::useRouter().forward"),back:fn().mockName("next/navigation::useRouter().back"),prefetch:fn().mockName("next/navigation::useRouter().prefetch"),refresh:fn().mockName("next/navigation::useRouter().refresh")};return overrides&&Object.keys(navigationActions).forEach(key=>{key in overrides&&(navigationActions[key]=fn((...args)=>overrides[key](...args)).mockName(`useRouter().${key}`));}),navigationAPI=navigationActions,navigationAPI},getRouter=()=>{if(!navigationAPI)throw new NextjsRouterMocksNotAvailable({importType:"next/navigation"});return navigationAPI},redirect=fn((url,type=actual.RedirectType.push)=>{throw getRedirectError(url,type,RedirectStatusCode.SeeOther)}).mockName("next/navigation::redirect"),permanentRedirect=fn((url,type=actual.RedirectType.push)=>{throw getRedirectError(url,type,RedirectStatusCode.SeeOther)}).mockName("next/navigation::permanentRedirect"),useSearchParams2=fn(actual.useSearchParams).mockName("next/navigation::useSearchParams"),usePathname2=fn(actual.usePathname).mockName("next/navigation::usePathname"),useSelectedLayoutSegment2=fn(actual.useSelectedLayoutSegment).mockName("next/navigation::useSelectedLayoutSegment"),useSelectedLayoutSegments2=fn(actual.useSelectedLayoutSegments).mockName("next/navigation::useSelectedLayoutSegments"),useRouter2=fn(actual.useRouter).mockName("next/navigation::useRouter"),useServerInsertedHTML2=fn(actual.useServerInsertedHTML).mockName("next/navigation::useServerInsertedHTML"),notFound2=fn(actual.notFound).mockName("next/navigation::notFound"),useParams2=fn(actual.useParams).mockName("next/navigation::useParams");

export { createNavigation, getRouter, notFound2 as notFound, permanentRedirect, redirect, useParams2 as useParams, usePathname2 as usePathname, useRouter2 as useRouter, useSearchParams2 as useSearchParams, useSelectedLayoutSegment2 as useSelectedLayoutSegment, useSelectedLayoutSegments2 as useSelectedLayoutSegments, useServerInsertedHTML2 as useServerInsertedHTML };

"use strict";var __create=Object.create;var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __getProtoOf=Object.getPrototypeOf,__hasOwnProp=Object.prototype.hasOwnProperty;var __export=(target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:!0})},__copyProps=(to,from,except,desc)=>{if(from&&typeof from=="object"||typeof from=="function")for(let key of __getOwnPropNames(from))!__hasOwnProp.call(to,key)&&key!==except&&__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to},__reExport=(target,mod,secondTarget)=>(__copyProps(target,mod,"default"),secondTarget&&__copyProps(secondTarget,mod,"default")),__toESM=(mod,isNodeMode,target)=>(target=mod!=null?__create(__getProtoOf(mod)):{},__copyProps(isNodeMode||!mod||!mod.__esModule?__defProp(target,"default",{value:mod,enumerable:!0}):target,mod)),__toCommonJS=mod=>__copyProps(__defProp({},"__esModule",{value:!0}),mod);var router_exports={};__export(router_exports,{createRouter:()=>createRouter,default:()=>router_default,getRouter:()=>getRouter,useRouter:()=>useRouter2,withRouter:()=>withRouter2});module.exports=__toCommonJS(router_exports);var import_preview_errors=require("storybook/internal/preview-errors"),import_test=require("@storybook/test"),originalRouter=__toESM(require("next/dist/client/router"));__reExport(router_exports,require("next/dist/client/router"),module.exports);var defaultRouterState={route:"/",asPath:"/",basePath:"/",pathname:"/",query:{},isFallback:!1,isLocaleDomain:!1,isReady:!0,isPreview:!1},routerAPI,createRouter=overrides=>{let routerActions={push:(0,import_test.fn)((..._args)=>Promise.resolve(!0)).mockName("next/router::useRouter().push"),replace:(0,import_test.fn)((..._args)=>Promise.resolve(!0)).mockName("next/router::useRouter().replace"),reload:(0,import_test.fn)((..._args)=>{}).mockName("next/router::useRouter().reload"),back:(0,import_test.fn)((..._args)=>{}).mockName("next/router::useRouter().back"),forward:(0,import_test.fn)(()=>{}).mockName("next/router::useRouter().forward"),prefetch:(0,import_test.fn)((..._args)=>Promise.resolve()).mockName("next/router::useRouter().prefetch"),beforePopState:(0,import_test.fn)((..._args)=>{}).mockName("next/router::useRouter().beforePopState")},routerEvents={on:(0,import_test.fn)((..._args)=>{}).mockName("next/router::useRouter().events.on"),off:(0,import_test.fn)((..._args)=>{}).mockName("next/router::useRouter().events.off"),emit:(0,import_test.fn)((..._args)=>{}).mockName("next/router::useRouter().events.emit")};return overrides&&Object.keys(routerActions).forEach(key=>{key in overrides&&(routerActions[key]=(0,import_test.fn)((...args)=>overrides[key](...args)).mockName(`useRouter().${key}`))}),overrides?.events&&Object.keys(routerEvents).forEach(key=>{key in routerEvents&&(routerEvents[key]=(0,import_test.fn)((...args)=>overrides.events[key](...args)).mockName(`useRouter().events.${key}`))}),routerAPI={...defaultRouterState,...overrides,...routerActions,events:routerEvents},originalRouter.default.router=routerAPI,originalRouter.default.readyCallbacks.forEach(cb=>cb()),originalRouter.default.readyCallbacks=[],routerAPI},getRouter=()=>{if(!routerAPI)throw new import_preview_errors.NextjsRouterMocksNotAvailable({importType:"next/router"});return routerAPI},router_default=originalRouter.default,useRouter2=(0,import_test.fn)(originalRouter.useRouter).mockName("next/router::useRouter"),withRouter2=(0,import_test.fn)(originalRouter.withRouter).mockName("next/router::withRouter");0&&(module.exports={createRouter,getRouter,useRouter,withRouter,...require("next/dist/client/router")});

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const _bitcannadevnet2 = __importStar(require("./bitcannadevnet2"));
const _celestiatestnet2 = __importStar(require("./celestiatestnet2"));
const _impacthubdevnet = __importStar(require("./impacthubdevnet"));
const _kyvedevnet = __importStar(require("./kyvedevnet"));
const _neuradevnet = __importStar(require("./neuradevnet"));
const _nibirudevnet = __importStar(require("./nibirudevnet"));
const _nibirudevnet2 = __importStar(require("./nibirudevnet2"));
const _nibirudevnet3 = __importStar(require("./nibirudevnet3"));
const _nibirudevnet4 = __importStar(require("./nibirudevnet4"));
const _seidevnet3 = __importStar(require("./seidevnet3"));
const chains = [
    _bitcannadevnet2.chain,
    _celestiatestnet2.chain,
    _impacthubdevnet.chain,
    _kyvedevnet.chain,
    _neuradevnet.chain,
    _nibirudevnet.chain,
    _nibirudevnet2.chain,
    _nibirudevnet3.chain,
    _nibirudevnet4.chain,
    _seidevnet3.chain
];
exports.default = chains;

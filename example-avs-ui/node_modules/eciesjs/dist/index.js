"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.utils = exports.PublicKey = exports.PrivateKey = exports.ECIES_CONFIG = void 0;
exports.encrypt = encrypt;
exports.decrypt = decrypt;
var utils_1 = require("@noble/ciphers/utils");
var config_1 = require("./config");
var keys_1 = require("./keys");
var utils_2 = require("./utils");
/**
 * Encrypts a message.
 * @description From version 0.5.0, `Uint8Array` will be returned instead of `Buffer`.
 * To keep the same behavior, use `Buffer.from(encrypt(...))`.
 *
 * @param receiverRawPK - Raw public key of the receiver, either as a hex string or a Uint8Array.
 * @param msg - Message to encrypt.
 * @returns Encrypted payload, format: `public key || encrypted`.
 */
function encrypt(receiverRawPK, msg) {
    var ephemeralSK = new keys_1.PrivateKey();
    var receiverPK = receiverRawPK instanceof Uint8Array
        ? new keys_1.PublicKey(receiverRawPK)
        : keys_1.PublicKey.fromHex(receiverRawPK);
    var sharedKey = ephemeralSK.encapsulate(receiverPK, (0, config_1.isHkdfKeyCompressed)());
    var ephemeralPK = (0, config_1.isEphemeralKeyCompressed)()
        ? ephemeralSK.publicKey.compressed
        : ephemeralSK.publicKey.uncompressed;
    var encrypted = (0, utils_2.symEncrypt)(sharedKey, msg);
    return Buffer.from((0, utils_1.concatBytes)(ephemeralPK, encrypted));
}
/**
 * Decrypts a message.
 * @description From version 0.5.0, `Uint8Array` will be returned instead of `Buffer`.
 * To keep the same behavior, use `Buffer.from(decrypt(...))`.
 *
 * @param receiverRawSK - Raw private key of the receiver, either as a hex string or a Uint8Array.
 * @param msg - Message to decrypt.
 * @returns Decrypted plain text.
 */
function decrypt(receiverRawSK, msg) {
    var receiverSK = receiverRawSK instanceof Uint8Array
        ? new keys_1.PrivateKey(receiverRawSK)
        : keys_1.PrivateKey.fromHex(receiverRawSK);
    var keySize = (0, config_1.ephemeralKeySize)();
    var ephemeralPK = new keys_1.PublicKey(msg.subarray(0, keySize));
    var encrypted = msg.subarray(keySize);
    var sharedKey = ephemeralPK.decapsulate(receiverSK, (0, config_1.isHkdfKeyCompressed)());
    return Buffer.from((0, utils_2.symDecrypt)(sharedKey, encrypted));
}
var config_2 = require("./config");
Object.defineProperty(exports, "ECIES_CONFIG", { enumerable: true, get: function () { return config_2.ECIES_CONFIG; } });
var keys_2 = require("./keys");
Object.defineProperty(exports, "PrivateKey", { enumerable: true, get: function () { return keys_2.PrivateKey; } });
Object.defineProperty(exports, "PublicKey", { enumerable: true, get: function () { return keys_2.PublicKey; } });
/** @deprecated - use `import utils from "eciesjs/utils"` instead. */
exports.utils = {
    // TODO: remove these after 0.5.0
    aesEncrypt: utils_2.aesEncrypt,
    aesDecrypt: utils_2.aesDecrypt,
    symEncrypt: utils_2.symEncrypt,
    symDecrypt: utils_2.symDecrypt,
    decodeHex: utils_2.decodeHex,
    getValidSecret: utils_2.getValidSecret,
    remove0x: utils_2.remove0x,
};
